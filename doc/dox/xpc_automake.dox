/**
 * \file       xpc_automake.dox
 * \library    xpc_suite and its libraries, applications, and documents
 * \author     Chris Ahlstrom
 * \date       2008-05-16 to 2022-06-01
 * \license    XPC GPL 3
 *
 *//**

\page xpc_automake GNU Automake

This module provides some notes on using GNU Automake.
This section describes the GNU automake setup for the XPCCUT
libraries and test applications.

\section xpc_am_intro GNU Automake

<b>GNU</b> <i>automake</i> is a tool for describing project via a simplified
set of Makefile templates arranged in a recursive (hierarchical) fashion.
<i>Automake</i> provides these benefits:

   -  Shorter, simpler <code>makefiles</code> (really!).
   -  Support for a large number of targets, with almost no effort.
   -  The ability to configure the files for different development
      platforms.

Although the term "simplified" is used, <i>automake</i> is still complex.
However, it is much less complex than writing a bare
<code>makefile</code> to do
the same things an <i>automake</i> setup will do.  The <i>automake</i> setup
will do <i>a lot</i> more.

Other systems have come along because of the complexity of <i>automake</i>.
A good example is <i>cmake</i> (http://www.cmake.org/HTML/index.html).
Another good example is <i>Boost.Build</i>
(http://www.boost.org/boost-build2/).
However, these systems seem to end up being just as complex as
<i>automake</i>, since they, too, need to handle the multifarious problems
of multi-platform development.  We really wanted to transition to
<i>Boost.Build</i>, but couldn't get it to handle <i>doxygen</i> in the
way we wanted, even though that product is supposed to be supported.

The present document assumes that you are familiar with <i>automake</i> and
have used it in projects.  The discussion is geared towards what features
<i>automake</i> supports in the <b>XPC</b> projects.

\section xpc_am_bootstrap The 'bootstrap' Script

First, note that one can run the following command to jump right into using
the <code>bootstrap</code> script:

\verbatim
   $ ./bootstrap --help
\endverbatim

Each <b>XPC</b> sub-project used to have its own <code>bootstrap</code> script,
but maintaining them was too difficult.  So, for <b>XPC 1.1</b>, there is
only one <code>bootstrap</code> script.  In addition, we've off-loaded some
of its functionality to a more flexible <code>build</code> script.

The <b>XPC</b> project provides a <code>bootstrap</code> script to handle
some common tasks.  This script makes it easy to start a project almost from
scratch, configure it (if desired), clean it thoroughly when done, pack it
up into a tarball, and prepare it for making.

The <code>bootstrap</code> script does a lot of what one has to do to set up
a project.  Thus, it also serves as a description of the operations required
in setting up almost any <b>GNU</b> <i>automake</i> project.

The <code>bootstrap</code> script also does a lot more cleanup than the
various "make clean" commands provided by <i>automake</i>.

One reason the <code>bootstrap</code> command does so much is that, even at
this late date, we are <i>still</i> finding that there are features of
<i>automake</i> that we don't know how to use.

When run by itself, <code>bootstrap</code> first creates all of the
directories needed for the project:

\verbatim
   $ mkdir -p aux-files
   $ mkdir -p config
   $ mkdir -p m4
   $ mkdir -p po
   $ mkdir -p include
\endverbatim

Some of these directories may already exist, of course.  

The user will normally create <code>src</code> for the library code, and
<code>tests</code> for unit-tests and regression tests.  The user may create
other directories if the project is more complex.  A <code>doc</code>
directory is commonly needed to hold documentation.  Our projects also
include a <code>doc/dox</code> directory for <b>Doxygen</b> documentation.

<code>bootstrap</code> recreates all of the <b>GNU</b> management files it
needs to create.  For <b>XPC 1.1</b>, we no longer bother keeping up with
the following files:

\verbatim
   ABOUT-NLS
   AUTHORS
   NEWS
   INSTALL
   TODO
\endverbatim

We avoid them by using the <code>foreign</code> keyword in the
<code>Makefile.am</code> files and in the <i>automake</i> call, to avoid
<i>automake</i> complaining about "missing files".

Some of the files are automatically generated by the <b>GNU</b>
<i>autoconf</i> tools.

Then <code>bootstrap</code> makes the following calls:

\verbatim
   $ PKGCONFIG=yes               (or no if not available)
   $ autopoint -f
   $ aclocal -I m4 --install
   $ autoconf
   $ autoheader
   $ libtoolize --automake --force --copy
   $ automake --foreign --add-missing --copy
   $ cp contrib/mkinstalldirs-1.9 aux-files/mkinstalldirs
\endverbatim

The actions above are the default actions of the <code>bootstrap</code>
script.  Command-line options are available to tailor the actions taken, to
implement some common operations:

\verbatim
   --configure
\endverbatim

The option above specifies that, after bootstrapping, run the
<code>configure</code> script with no special options.  This is no
longer the default action of the <code>bootstrap</code> script.
It is now preferred to use the <code>build</code> script.

\verbatim
   --no-configure
    -nc
\endverbatim

The option above specifies to not proceed to run the <code>configure</code>
script.  Simply bootstrap the project.  Use this option, and later run
<code>./configure</code> or <code>build</code> for building for debugging,
stack-checking, and many other options.

\verbatim
   --enable-debug
   --debug
    -ed
\endverbatim

The options above cause the <code>bootstrap</code> script to run
<code>configure</code> with the <code>--enable-debug</code> and
<code>--disable-shared</code> flags.

Again, it is now preferred to use the <code>build</code> script for this
purpose.

\verbatim
   --cpp-configure
\endverbatim

The option above specifies to configure the project with the
<b>XPC</b>-specific <code>--disable-thisptr</code> option.  This option is
good for usage in <b>C++</b> code, where the developer is passing unit-test
structure objects by reference to <b>C++</b> functions.  Since the item is a
reference to an actual (non-pointer) class member, it is guaranteed to
exist, and therefore null <code>this</code> pointer checks are unnecessary.
This option can be combined with the <code>--debug</code> option.

\warning
   This option will make a version of the unit-test (unit_test_test in the
   tests directory) that will segfault due to attempts to use the null
   pointers supplied in some of the tests.

   In most cases, the C++ developer will want to treat the resulting
   library as a <i>convenience library</i>:

   http://sources.redhat.com/autobook/autobook/autobook_92.html

   As such, the <code>--disable-thisptr</code> version of <b>XPC</b> libraries
   should <i>not</i> be installed by the developer.  Otherwise, <b>C</b>
   unit-test applications will lose the benefits of null-pointer checks.
   The <b>XPC CUT++</b> build process links in this specially-built version
   of the <b>CUT</b> library into the <b>CUT++</b> library, and the install
   process does make sure that the<b>C</b> header files are also installed.

The following <code>bootstrap</code> options for <b>XPC 1.0</b> no longer
exist in <b>XPC 1.1</b>.

\verbatim
   --make, -m
   --generate-docs
   --no-generate-docs
   --no-automake
\endverbatim

The following options still apply, but they operate on <i>all</i> <b>XPC</b>
projects as whole:

\verbatim
   --clean
     clean
\endverbatim

The options above specify to delete <i>all</i> derived and junk files from
the project.

\verbatim
   --debian-clean
\endverbatim

The option above specifies to just remove the files created by running the
various debian/rules script options.

The default of the <code>bootstrap</code> script is to bootstrap the
project.  To set up other configurations, manually call the desired
<code>configure</code> command.  For example,
to generate (for example) debugging code using static libraries:

\verbatim
   ./bootstrap
   ./configure --enable-debug --enable-coverage --enable-thisptr --disable-shared
\endverbatim

Also see the <code>build</code> script, which is the new preferred (and
easier) method of configuring (and building, and testing) the
projects.

\section xpc_am_build The 'build' Script

First, note that one can run the following command to jump right into using
the <code>build</code> script:

\verbatim
   $ ./build --help
\endverbatim

The <code>build</code> script is new with <b>XPC 1.1</b>.

It can be run after the <code>bootstrap</code> script is run.

It supports the same <i>configure</i> process as <code>bootstrap</code>, but
it also add the following features:

   -  Build <i>out-of-source</i> configurations.  This allows the developer
      to create directories suchs as <code>release</code> and
      <code>debug</code> in which to build the code.
   -  Perform a whole-project <i>make</i>, which builds all of the
      <b>XPC</b> source code, <code>pkgconfig</code> files,
      <code>*.po</code> files, and documentation.
   -  Selectively build a single project or the documentation.

The following <code>build</code> options cause the projects to be configured 
with certain options and built in a special output subdirectory:

\verbatim
   Name           Directory      Build Options

   --release      release        None
   --debug        debug          --enable-debug --disable-shared
   --cpp          cpp            --disable-thisptr
   --build name   name           None
\endverbatim

These options work by creating the directory, changing to it, and running a
<code>../configure</code> command.  This action creates only
<code>Makefiles</code> that mirror the original directory structure, and
cause the modules from the original directory structure to be compiled and
built into the new directory structure.  These options offer a way to
maintain multiple builds of the same code.

The following option supports selecting what to build:

\verbatim
   --project name
\endverbatim

The potential values of name are (or will be):

\verbatim
   all            Build all projects and the documentation. Default.
   doc            Just build the documentation.
   xpccut         Build the xpccut C project.
   xpccut++       Build the xpccut++ C++ project.
   xpc            Build the xpc C project.
   xpc++          Build the xpc++ C++ project.
   xpcproperty    Build the xpcproperty project.
   xpchello       Build the xpchello project.
\endverbatim

The default action, after configuration, is to perform the <i>make</i>:

\verbatim
   --make
   --no-make
\endverbatim

The rest of the options are also found in <code>bootstrap</code>.  See the
<code>--help</code> option.

Now, if the <code>all</code> project is selected, the following sequence of
actions will occur:

   <b>(NOT YET FULLY IMPLEMENTED)</b>

   -# xpccut
      -# Build <code>xpccut</code> normally in the selected out-of-source
         directory (preferably <code>release</code>, but <code>debug</code>
         or a directory name you pick yourself will also work).
      -# Build <code>xpccut</code> with <code>--disable-thisptr</code> in the
         <code>cpp</code> directory.
      -# Build <code>xpccut++</code> normally in the selected out-of-source
         directory, linking it to the<code>--disable-thisptr</code> version of
         <code>xpccut</code>.
   -# xpc
      -# Build <code>xpc</code> normally in the selected out-of-source directory
         (preferably <code>release</code>, but <code>debug</code> or a
          directory name you pick yourself will also work).
      -# Build <code>xpc</code> with <code>--disable-thisptr</code> in the
         <code>cpp</code> directory.
      -# Build <code>xpc++</code> normally in the selected out-of-source
         directory, linking it to the<code>--disable-thisptr</code> version
         of <code>xpc</code>.
   -# Build <code>xpcompmgr++</code> normally in the selected out-of-source
      directory.
   -# Build <code>xpcproperty</code> normally in the selected out-of-source
      directory.
   -# Build <code>xpchello</code> normally in the selected out-of-source
      directory.

\section xpc_am_configure The configure.ac Script

The <b>XPC</b> projects support a number of build options.  Some are
standard, such as compiling for debugging and internationalization support.
Some options are peculiar to <b>XPC</b>, such as conditional support for
error-logging and pointer-checking.

As usual in <b>GNU</b> <i>automake</i>, the options are supported by switches
passed to the <code>configure.ac</code> script, supported by corresponding
<i>m4</i> macros in the <code>m4</code> directory.  Here are the options:

\verbatim
     Switch             Default  Status/Description

   --enable-debug          no    Compiles for gdb
   --enable-lp64           no    Very problematic at present, useless
   --enable-stackcheck     no    Makes segfaults much more likely, a good test
   --enable-thisptr        yes   Activates thisptr() null-pointer check
   --enable-errorlog       yes   Provides run-time logging at various verbosities
   --without-readline      no    readline() support enabled by default
   --enable-coverage       no    Coverage testing using gcov
   --enable-profiling      no    Turns on gprof support
   --enable-motorola       no    Compiles for MC68020 to check the code
\endverbatim

The Motorola option requires a version of <i>gcc</i> called something like
<i>68000-gcc</i>, which is a version of <i>gcc</i> built for
cross-compiling.  We still have a lot more to learn about this issue.  It
isn't ready, and may be wrong-headed anyway.

Some of the options can take additional parameters to tweak how they work.
The options that can do that are:

   -  <code>--enable-debug</code>.
      In addition to the standard <code>yes</code> and
      <code>no</code> values, also accepted are <code>gdb</code> (the
      default) and <code>db</code> (the BSD/UNIX variant).  See \ref
      xpc_debugging for more information.
   -  <code>--enable-coverage</code>.  See \ref xpc_cp_gcov_build for more
      information.
   -  <code>--enable-profiling</code>.  See \ref xpc_cp_gprof_build for more
      information.

These options are implemented by the <code>AC_XPC_DEBUGGING</code> macro
call in the <b>XPCCUT</b>'s <code>configure.ac</code> file.

\section xpc_am_make Making the XPCCUT Library

This section assumes that you have bootstrapped and configured the library
in some manner.  It also assumes that you want to install the library for
usage by another project.

\subsection xpc_am_make_normal Making the Library for Normal Usage

There's not much to explain here.  Once the <b>XPC CUT</b> library is
bootstrapped and configured, the rest of the process is very simple and
standard at this point:

\verbatim
   $ make
   $ make check   [or "make test"]
   # make install
\endverbatim

This sequence of steps installs the library (<code>libxpccut</code> in static
and shared-object forms), the <code>unit_*.h</code> header files, the HTML
version of the documentation, a rudimentary <i>man</i> page, a primitive
(and usually incomplete) Spanish translation for the error and information
messages, and a <i>pkg-config</i> file that can be referred to in the
<code>configure.ac</code> file of projects that want to link properly to the
<b>XPC CUT</b> library.

There is one special project that is deeply dependent on the <b>XPC CUT</b>
library, and that is the <b>XPC CUT++</b> library and test application.  This
special case is discussed in the next subsection.

\subsection xpc_am_make_xpccutpp Making the Library for XPC CUT++

The <b>XPC CUT++</b> library is a C++ wrapper for the <b>XPC CUT</b>
library.  As such, it basically requires the <b>XPC CUT</b> library to be
built at the same time.  It does not require the <b>XPC CUT</b> library to
be installed fully, however.  Instead, the library is built and linked into
the <b>C++</b> version of the library, and only the header files are
installed.

Rather than have the developer deal with all of this, the <code>bootstrap</code>
script for the <b>XPC CUT++</b> library looks for the <b>XPC CUT</b> library
source-code in the same base directory (e.g. <code>xpc_suite</code>.  If it
finds it, it bootstraps it configures it with the same user options as
passed to the <code>bootstrap</code> script, plus a "secret" option to
disable the this-pointer checking, for a little extra speed.

Then the <b>XPC CUT</b> library is built.

When the <b>XPC CUT++</b> library is built, the <b>XPC CUT</b> library is
then added to the <b>C++</b> version of the library, so that <b>C++</b>
applications need include only one library.

We're also working on a <b>CUT++</b> sample application that will help us
make sure that the <b>XPC CUT++</b> combines properly the <b>C</b> and
<b>C++</b> components, and installs properly the <b>C</b> and <b>C++</b>
header files.  See the \ref xpc_cutsample_introduction page for more
information.

\section xpc_am_usage Linking to the XPC CUT Library

Using the <b>XPC CUT</b> library in an external application requires that
the <b>XPC CUT</b> library be installed, as noted by the simple instructions
in the previous section.

The application project must make some settings in the following project
files:

   -# <code>configure.ac</code>
   -# <code>app/Makefile.am</code>  (as applicable)
   -# <code>tests/Makefile.am</code>  (as applicable)

In the application's <code>configure.ac</code> file, the following line is
necessary:

\verbatim
PKG_CHECK_MODULES([XPCCUT], [xpccut-1.0 >= 1.0])
\endverbatim

This directive causes the <code>XPCCUT_CFLAGS</code>
and <code>XPCCUT_LIBS</code> macros to be defined as if the following commands
were run, and the output assigned to the respective macros:

\verbatim
   $ pkg-config --cflags xpccut-1.1
   $ pkg-config --libs xpccut-1.1
\endverbatim

The respective outputs of these commands are

\verbatim
   -I/usr/local/include/xpc-1.1
   -L/usr/local/lib/xpc-1.1 -lxpccut
\endverbatim

These values need to be added to the command lines.  First, in
<code>configure.ac</code>, the <code>CFLAGS</code> value needs to be augmented:

\verbatim
   CFLAGS="$CFLAGS $CFLAGSTD $COMMONFLAGS $XPCCUT_CFLAGS"
\endverbatim

In the <code>Makefile.am</code> in the application directory, the following are
needed.  First, expose the <code>-L</code> and <code>-l</code> directives noted
above.

\verbatim
   XPCCUT_LIBS = @XPCCUT_LIBS@
\endverbatim

Note that the <code>XPCCUT_CFLAGS</code> macro is automatically carried through
to the application's subdirectory as part of the <i>automake</i> process.

For a good example, see the \ref xpc_hello_mainpage page and the <b>XPC</b>
<i>Hello</i> application it describes.

\section xpc_am_libtool Libtool

This section describes <i>libtool</i> and contains notes from other documents in
the suite.

\subsection xpc_am_libtool_versioning Libtool Versioning

We support two types of version in the <b>XPC</b> suite:

   -  Package versioning
   -  Libtool versioning

Package version indicates when major changes occur in a package, and also
indicates what sub-directory the libraries are installed in.  For example,
the current package version of the <b>XPC</b> suite is
<code>1.0.4</code>.  The libraries and header files are included
in directories with names of the form <code>xpc-1.0</code>.  The
<code>4</code> increments whenever we have made enough changes to
make a new release.  If the changes modify or delete an existing
interface, then the <code>0</code> will get incremented to
<code>1</code>, and the new storage directory will become
<code>xpc-1.1</code>.  If we rewrite any major component of the
suite, then the <code>1</code> in <code>1.0</code> will increment,
and the new storage directory will become <code>xpc-2.0</code>.
We don't anticipate this kind of major change, though.

Although package version is visible to the user, and partly determines the
compatibility of the <b>XPC</b> libraries, the actual interface versioning
is determined by <i>libtool</i> versioning.  The following discussion is a
succinct description of this link:

   http://www.nondot.org/sabre/Mirrored/libtool-2.1a/libtool_6.html

Imagine a simple version number, starting at 1.
Consider each significant change to the library as incrementing this number.
This increment reflects a new interface.  <i>libtool</i> supports specifying
that interface versions from <code>i</code> to <code>j</code> are supported.

<i>libtool</i> library versions are described by three integers:

   -  <code>current</code>.
      The most recent interface number that this library implements. 
   -  <code>revision</code>.
      The implementation number of the current interface. 
   -  <code>age</code>.
      The difference between the newest and oldest interfaces that
      this library implements.

The library implements all the interface numbers in the range from
<code>current - age</code> to <code>current</code>.

If two libraries have identical <code>current</code> and <code>age</code>
numbers, then the dynamic linker chooses the library with the greater
<code>revision</code> number. 

The <b>XPC</b> suite actually abused the distinction between the package and
<i>libtool</i> version information.  So, for <b>XPC</b> package version
<code>1.0.4</code>, we are resetting the <i>libtool</i> version to
<code>0:0:0</code>

When we make public the next version with any changes at all, the new
versions will be:

   -  <b>Package</b>:  <code>1.0.5</code> (patch++)
   -  <b>libtool</b>:  <code>0:1:0</code> (revision++)

If, instead of just any simple change, we added an interface:

   -  <b>Package</b>:  <code>1.0.5</code> (change in patch number)
   -  <b>libtool</b>:  <code>1:0:1</code> (current++, revision=0, age++)

Our reasoning here is that the additional interface cannot break existing
code, so that the same installation directory, <code>xpc-1.0</code>, can be
used.

If we changed or removed an existing interface, or refactored the whole set
of projects, old code will break, so
we'll need a new installation directory.

   -  <b>Package</b>:  <code>1.1.0</code> (minor++, patch=0)
   -  <b>libtool</b>:  <code>1:0:0</code> (current++, revision=0)

If the changes were really major (a rewrite of the libraries):

   -  <b>Package</b>:  <code>2.0.0</code> (major++, minor=0, patch=0)
   -  <b>libtool</b>:  <code>1:1:1</code> (current++, revision++, age++)

\section xpc_am_pkgconfig pkgconfig

GNU <i>pkgconfig</i> is
a way to help applications find out where packages are stored
on a system.  The common places to store them are (in descending order of
likelihood on a Linux system):

\verbatim
   /usr           Apps installed by the default package manager.
   /usr/local     Apps installed from source code.
   /opt           Solaris and Java flavored apps such as OpenOffice
   $HOME          Apps installed by the user in his/her home directory.
\endverbatim

As an example, we were trying to install totem (a media player for the Gnome
desktop environment) on a Gentoo system.  The Gentoo emerge system provided
an old version, 1.0.4, but we wanted the latest, which happened to be 1.5.
Thus, we went to the totem site and downloaded the source.   Running configure
revealed a dependency on "iso-codes".  However, that package was masked on
Gentoo.

Since it was a Debian package, we found it at 

   http://packages.debian.org/testing/misc/iso-codes

and downloaded the source tarball.  We did the <code>./configure; make; make
install</code> mantra, and then retried the configuration of the totem build.

Still missing.  We looked in <code>/usr/lib/pkgconfig</code>, but no
<code>iso-codes.pc</code> file.  Nor was it in
<code>/usr/local/lib/pkgconfig</code>, which is where we expected to find
it.

So we look in the iso-codes build area, and see the iso-codes
package-configuration file.  We copied it to
<code>/usr/local/lib/pkgconfig</code>.

The totem configuration was then built with no problem.

\section xpc_am_endorsement Endorsement

A rousing endorsement of Libtool and Pkgconfig from Ulrich Drepper:

   http://udrepper.livejournal.com/19395.html

The second problem to mention here is that not all unused dependencies
are gone because somebody thought s/he is clever and uses -pthread in one
of the pkgconfig files instead of linking with -lpthread. That's just
stupid when combined with the insanity called libtool. The result is that
the -Wl,--as-needed is not applied to the thread library.

Just avoid libtool and pkgconfig. At the very least fix up the pkgconfig
files to use -Wl,--as-needed.

Hmmm, we need to remember that "at the very least" advice....

\section xpc_am_references References

   -# http://wiki.showmedo.com/index.php/LinuxBernsteinMakeDebugSeries
      Discusses an improved version of automake, called "remake".
   -# http://www.gnu.org/software/libtool/manual/automake/VPATH-Builds.html
      Discusses building the object files in a separate subdirectory.
   -# http://www.nondot.org/sabre/Mirrored/libtool-2.1a/libtool_6.html
      Discusses versioning in libtool.
   -# http://www.adp-gmbh.ch/misc/tools/configure/configure_in.html
      Walks the user through a configure.ac file; very helpful.
   -# http://www.geocities.com/foetsch/mfgraph/automake.htm
      Provides a nice summary of autoconf/automake projects.

 */

/*
 * xpc_suite/doc/dox/xpc_automake.dox
 *
 * vim: ts=3 sw=3 et syntax=doxygen
 */
