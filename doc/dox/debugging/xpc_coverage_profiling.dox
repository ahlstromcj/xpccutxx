/**
 * \file       xpc_coverage_profiling.dox
 * \library    libxpccut, the C unit-test library
 * \author     Chris Ahlstrom
 * \date       2009-03-14 to 2022-06-01
 * \license    XPC GPL 3
 *
 *//**

\page       xpc_coverage_profiling Unit Test Coverage and Profiling

This file provides a tutorial on using the <b>GNU</b> test-coverage and
profiling tools.

\section xpc_cp_introduction Introduction to Coverage Testing and Profiling

This document describes how to use \e gcov (coverage testing) and \e gprof
(code profiling), using the <b>XPCCUT</b> unit-test project as an example.
As befits the purpose of that project, that's where this document can be
found.

Coverage testing analyzes the code to determine which functions an
application exercises during its run.

Code Profiling analyzes executing code to determine where most of the CPU
time is being spent.

Together, both methods ensure that your code is as well-tested and as fast
as you can make it.

\section xpc_cp_installation Installing 'gcov' and 'gprof'

The means of installing \e gcov and \e gprof vary with your Linux (or BSD)
distribution.  (We won't even get into <i>Solaris</i>.)

\e gcov is provided as part of the \e gcc package, and \e gprof is provided
by \e binutils package (in Debian, anyway).

Other potentially helpful (Debian) packages are available:

   -  <tt>lcov</tt>.  A set of PERL scripts that provide colored HTML output
      with overview pages and various views of the coverage.
   -  <tt>ggcov</tt>.  A GUI for browsing C test-coverage results.

\section xpc_cp_gcov The 'gcov' Coverage Application

What is \e gcov?  From the GCOV(1) man page.

\verbatim
   gcov is a test coverage program.  Use it in concert with GCC to analyze
   your programs to help create more efficient, faster running code and to
   discover untested parts of your program.  You can use gcov as a
   profiling tool to help discover where your optimization efforts will
   best affect your code.  You can also use gcov along with the other
   profiling tool, gprof, to assess which parts of your code use the
   greatest amount of computing time.
\endverbatim

The \e GNU \e gcov manual can be found at:

   http://gcc.gnu.org/onlinedocs/gcc/Gcov.html

A good PDF version is available in Chapter 9 of the \e GNU \e gcc manual, PDF
version:

   http://gcc.gnu.org/onlinedocs/gcc.pdf

Also very helpful is <i>The Definitive Guide to GCC</i>, Chapter 6.  See the
\ref xpc_cp_references section for more details.

\subsection xpc_cp_gcov_build Building For 'gcov' Usage

An application to be analyzed with \e gcov needs to be compiled in a special
manner:

   -  Use a \e gcc compiler.
   -  Use no optimization.
   -  Use the <tt>-fprofile-arcs</tt> option.
   -  Use the <tt>-ftest-coverage</tt> option.

In the <b>XPCCUT</b> project, this is all done easily with these commands:

\verbatim
   $ ./bootstrap --clean                     (if needed)
   $ ./bootstrap --no-configure              -or-
   $ ./bootstrap -nc
   $ ./configure --enable-coverage
\endverbatim

Note the <tt>--enable-coverage</tt> option.  It is implemented as part of
the <tt>m4/xpc_debug.m4</tt> script, which is specified by the
<tt>AC_XPC_DEBUGGING</tt> macro call in the <b>XPCCUT</b>'s
<tt>configure.ac</tt> file.

In addition to the normal arguments, you can
specify the following forms:

   -  --enable-coverage=gdb (the default)
   -  --enable-coverage=db

The first variant is the default, which specifies <i>GNU</i> <b>gdb</b>
compatibility.  The <b>gcc</b> flags for the <b>gdb</b> variant are:

\verbatim
   -O0 -ggdb
\endverbatim

The second variant supports the <i>BSD</i> <b>db</b> program.
The <b>gcc</b> flags for the <b>db</b> variant are:

\verbatim
   -O0 -g
\endverbatim

Once the configuration has been set up, run \e make in the <tt>src</tt>
directory.

\verbatim
   $ cd src
   $ make
\endverbatim

Note that there are <tt>*.gcno</tt> files that are created by this compile,
one for each C module that is built.  Moreover, these are built both in
the <tt>src</tt> and the <tt>src/.libs</tt> directories.
(The latter is a hidden directory created by \e libtool.

Next, run \e make again in the <tt>tests</tt> directory.

\verbatim
   $ cd ..
   $ cd tests
   $ make
\endverbatim

Note, again, that there are <tt>*.gcno</tt> files that are created by this
compile, one for each <b>C</b> module that is built in the <tt>tests</tt>
directory.

\subsection xpc_cp_run_for_gcov Running for Coverage

Now we want to run the application once, to see how much module coverage we
have.

General principles:

   -  It seems best to run the application from the project root directory,
      not from its <tt>tests</tt> directory.
   -  A file <tt><i>my_c_module</i>.gcda</tt> file will be created in the
      <tt>tests</tt> directory by running the application.
   -  Additional <tt>*.gcda</tt> files will be created in the
      <tt>src/.libs</tt> directory.
   -  The run information in this file accumulates with each run.
      To start fresh, the <tt>*.gcda</tt> files have to be deleted.
   -  <i>Question</i>:  What are the <tt>*.bb</tt> and <tt>*.bbg</tt> files
      referred to in some of the documentation?  They don't appear in our
      project, so are perhaps obsolete.

Run the application (here, called <tt>unit_test_test</tt>).

\verbatim
   $ ./tests/unit_test_test
\endverbatim

Note that we are running it from the <i>root</i> of the project.  This is
necessary in order for files in the <tt>src</tt> directory to get their
analysis done and their output files created.

The following items are generated:

   -  Generates <tt>./tests/unit_test_test.gcda</tt>
   -  In a \e libtool project such as this one, it also generates
      <tt>./src/.libs/*.gcda</tt> (one for each C module in <tt>src</tt>).
   -  However, no <tt>*.gcda</tt> files are generated in <tt>src</tt> itself.

\subsection xpc_cp_gcov_run Running 'gcov' for Analysis

Once the test data are generated, with \e gcov information, they need to be
analyzed using \e gcov.

Here are some commands to try.
These commands can be done inside the proper directory (either <tt>src</tt>
or <tt>tests</tt>, as appropriate.)

\verbatim
   $ gcov <i>my_c_module.c</i>
\endverbatim

The command above must be run for which the analysis of coverage data is
desired.

\verbatim
   $ gcov -b my_c_module.c
\endverbatim

The command above generates branch probabilities.

\verbatim
   $ gcov -f my_c_module.c
\endverbatim

The command above analyzes function calls.

All of the commands above are useful for analyzing a library module.

In the following command, both are done, and output goes to an additional
log file that can be examined at leisure.

\verbatim
   $ cd tests
   $ gcov -b -f *.c > output.log
\endverbatim

The run produces a <tt>unit_test_test.c.gcov</tt> annotated source file.
If the <tt>-f</tt> switch was provided, then <tt>output.log</tt> will
also contain the summary information.

To make it easier to do all of this, a <tt>gcov</tt> target is provided in
the top-level <tt>Makefile.am</tt> make-file.  As a synonym, a
<tt>coverage</tt> target is also provided.

Although there is a lot to be looked at in the <tt>*.gcov</tt> file, let's
limit ourselves to simply checking for lines that did not get executed.
Examining the <tt>unit_test_test.c.gcov</tt> annotated source file, we can
search for unexecuted lines -- they have <tt>#####</tt> in them.

The first one we find is

\verbatim
#####:  157:         unit_test_status_pass(&status, true);
\endverbatim

and the second is

\verbatim
#####:  162:            fprintf(stdout, "  %s\n", _("No values to show ...
\endverbatim

There are more, but let's just try to eliminate these two unexecuted lines
by subsequent runs of <tt>unit_test_test</tt> with additional arguments.

\verbatim
   $ ./tests/unit_test_test --group 2 --case 2
   $ gcov -b -f *.c > output.log
   $ vi unit_test_test.c.gcov
\endverbatim

We tried to get the test-skipping mechanism to work, but looking at the
<tt>*.gcov</tt> file, we see we did not succeed.  Either another option is
necessary, or we have a feature that is not completely implemented!  Oh
well, let's try the next unexecuted line.

\verbatim
   $ ./tests/unit_test_test --show-values
   $ gcov -b -f *.c > output.log
   $ vi unit_test_test.c.gcov
\endverbatim

This time, it worked, and we see that line 162 has now been executed.

We can keep at it, trying more options until we have tried them all, and
verified that every line of code in the test application has been touched.

Next, we need to check the coverage of the library modules.

\verbatim
   $ cd src
   $ gcov -o .libs/ *.c                         -or-
   $ gcov -b -f -o .libs *.c > output.log
\endverbatim

This results in <tt>*.gcov</tt> files not in <tt>.libs</tt>, but in
<tt>src</tt>.  Let's look at just one, <tt>portable_subset.c.gcov</tt>.
It has a lot of unexecuted code, because some of the code is meant purely
for error conditions that a good coder will avoid easily.  We don't really
care about testing this module, since it is meant only for internal usage
[another library provides more advanced versions of the functions in the
<tt>portable_subset.c</tt> module].  However, let's add a test of one of the
functions to the <tt>unit_test_test.c</tt> module.

The function to be tested is <tt>xpc_nullptr()</tt>, and it has its own test-case
group in the <tt>unit_test_test.c</tt> module, test group <i>07</i>.   Here
is a summary of what we did to rebuild:

\verbatim
   $ vi tests/unit_test_test.c include/xcp/portable_subset.c
   $ cd src
   $ make clean
   $ make
   $ cd ../tests
   $ make clean
   $ make
   $ cd ..
   $ ./tests/unit_test_test --show-values
   $ cd tests
   $ gcov -b -f *.c > output.log
   $ cd ../src
   $ gcov -b -f -o .libs *.c > output.log
   $ vi portable_subset.c.gcov
\endverbatim

And you can now verify that <tt>xpc_nullptr()</tt> no longer is left out of
the test run.

By the way, if you want to start from scratch, change to the project's root
directory, run the following command, and repeat the steps above.

\verbatim
   $ ./bootstrap --clean
\endverbatim

There is a lot more that can be tested for coverage.  You are welcome to
do that, and tell me what I have missed!

\section xpc_cp_gprof The 'gprof' Profiling Application

\e gprof is another GNU application for analyzing code.  It works at
run-time, tabulating whether the program spends most of its time.  Hence, it
is useful for find the places where optimization (or even fixes or design
changes) would do the most good.

Other potentially helpful packages are available:

   -  <tt>qprof</tt>.  A set of profiling utilities for Linux.
   -  <tt>kprof</tt>.  A profiling front-end for gprof, Function Check, and
      Palm OS Emulator.

\subsection xpc_cp_gprof_build Building For 'gprof' Usage

An application to be analyzed with \e gprof needs to be compiled in a special
manner:

   -  Use a \e gcc compiler.
   -  Use the <tt>-pg</tt> option to link in the profiling libraries.
   -  Add <tt>-g</tt> for line-by-line profiling.
   -  Use <tt>-finstrument-functions</tt> if you have your own profiling hooks.
   -  Avoid optimization.

In the <b>XPCCUT</b> project, this is all done easily with these commands:

\verbatim
   $ ./bootstrap --clean                     (if needed)
   $ ./bootstrap --no-configure              -or-
   $ ./bootstrap -nc
   $ ./configure --enable-profiling --disable-shared
\endverbatim

Note the <tt>--enable-profile</tt> option.  It is implemented as part of
the <tt>m4/xpc_debug.m4</tt> script, which is specified by the
<tt>AC_XPC_DEBUGGING</tt> macro call in the <b>XPCCUT</b>'s
<tt>configure.ac</tt> file.

Also note the use of the <tt>--disable-shared</tt> option, which is a
standard <tt>configure</tt> option.  If this flag is not provided to
<tt>configure</tt>, attempt to run the <b>gprof</b> command on the
executable will result in the following error message:

\verbatim
   gprof: unit_test_test: not in executable format
\endverbatim

Apparently, using shared libraries will mess up the profiler.

In addition to the normal arguments, you can
specify the following forms:

   -  --enable-profiling=gprof (the default)
   -  --enable-profiling=prof

The first variant is the default, which specifies <i>GNU</i> <b>gprof</b>
compatibility.  The <b>gcc</b> flags for the <b>gprof</b> variant are:

\verbatim
   -pg -O0 -ggdb
\endverbatim

The second variant supports the <i>BSD</i> <b>prof</b> program.
The <b>gcc</b> flags for the <b>prof</b> variant are:

\verbatim
   -p -O0 -g
\endverbatim

If you want to do code-coverage at the same time, you should be able to add
the <tt>-ftest-coverage</tt> option.  I have not yet tried this, though.
Let me know how it works.

Once the configuration has been set up, run \e make in the <tt>src</tt>
directory.

\verbatim
   $ cd src
   $ make
\endverbatim

Then run it in the <tt>tests</tt> directory.

\verbatim
   $ cd ../tests
   $ make
\endverbatim

\subsection xpc_cp_run_for_gprof Running for Profiling

Change to the application's directory (<i>unlike for gcov?</i>) and run
the following commands.

\verbatim
   $ ./unit_test_test
\endverbatim

The result of this run is a file called <tt>gmon.out</tt> in the
<tt>tests</tt> directory.

\subsection xpc_cp_gprof_run Running for 'gprof' Analysis

Once the test data are generated, with \e gprof information, they need to be
analyzed using \e gprof.

Here are some commands to try.
These commands can be done inside the proper directory (either <tt>src</tt>
or <tt>tests</tt>, as appropriate.)

\verbatim
   $ gprof ./unit_test_test
\endverbatim

One can add the following options:

   -  The <tt>-b</tt> option for brief output.
   -  The <tt>-A</tt> option for annotated source code.

\todo
   -  Make sure src and tests 'clean' targets get rid of the *.gc* files.
      CLEANFILES
   -  Note in xpc_64_bit.m4 that it is /cross/ compilation.
   -  Let --enable-gcov be the same as --enable-coverage
   -  Support 'make gcov' or 'make coverage'
   -  Figure out how to properly add '-lgcov' to LDFLAGS, (if needed)

\section xpc_cp_references References

   -  http://gcc.gnu.org/onlinedocs/gcc.pdf
      GNU gcc manual
   -  http://gcc.gnu.org/onlinedocs/gcc/Gcov.html
      gcov -- Test Coverage Program
   -  http://www.apress.com/book/view/9781590591093 (1st edition) and
      http://book.pdfchm.com/the-definitive-guide-to-gcc-second-edition-9569/
      von Hagen, William (2006) <i>The Definitive Guide to GCC</i>, 2nd
      edition.  Apress, Berkeley, California.

 */

/*
 * xpccut/doc/dox/xpc_coverage_profiling.dox
 *
 * vim: ts=3 sw=3 et syntax=doxygen
 */
